/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controledopuxafrangos;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author alexandre
 */
public class TelaEscrita extends javax.swing.JFrame {

    private int alturaLimite;
    private int larguraLimite;
    private boolean escrevendo;

    private ArrayList<ArrayList<Point2D>> rotas;

    private ArrayList<Point2D> rotaAtual;

    private Stroke strokeEscrita;
    private Color corEscrita;

    /**
     * Creates new form TelaEscrita
     */
    public TelaEscrita() {
        initComponents();
        setLocationRelativeTo(null);
        rotas = new ArrayList<>();

        strokeEscrita = new BasicStroke(2, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 0.5f);
        corEscrita = Color.BLUE;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        desenharPainelEscrita(null);
    }

    private void desenharPainelEscrita(Graphics2D g) {
        if (g == null) {
            g = (Graphics2D) pCanvas.getGraphics();

            // obter altura limite para exibição
            alturaLimite = pCanvas.getHeight();

            // obter largura limite para exibição
            larguraLimite = pCanvas.getWidth();
        }

        // desenha fundo
        g.setColor(Color.white);
        g.fillRect(0, 0, 1000, 500);

        g.drawImage(new ImageIcon(getClass().getClassLoader().getResource("img/fundo.png")).getImage(), 0, 0, rootPane);

        // desenha trilhas escritas
        g.setColor(corEscrita);
        g.setStroke(strokeEscrita);
        for (int i = 0; i < rotas.size(); i++) {
            int tamRota = rotas.get(i).size();
            int[] rotaX = new int[tamRota];
            int[] rotaY = new int[tamRota];
            for (int j = 0; j < tamRota; j++) {
                rotaX[j] = (int)rotas.get(i).get(j).getX();
                rotaY[j] = (int)rotas.get(i).get(j).getY();
            }
            g.drawPolyline(rotaX, rotaY, tamRota);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonExecutar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerAlturaPapel = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        pCanvas = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Puxa-frangos [Escrita]");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButtonExecutar.setText("Executar");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("altura do papel");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonExecutar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLimpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 617, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerAlturaPapel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jSpinnerAlturaPapel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonExecutar)
                        .addComponent(jButtonLimpar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        pCanvas.setPreferredSize(new java.awt.Dimension(0, 500));
        pCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pCanvasMouseDragged(evt);
            }
        });
        pCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pCanvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pCanvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout pCanvasLayout = new javax.swing.GroupLayout(pCanvas);
        pCanvas.setLayout(pCanvasLayout);
        pCanvasLayout.setHorizontalGroup(
            pCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pCanvasLayout.setVerticalGroup(
            pCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pCanvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pCanvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pCanvasMousePressed
        escrevendo = true;
        rotaAtual = new ArrayList<>();
        rotas.add(rotaAtual);

        rotaAtual.add(new Point(evt.getX(), evt.getY()));

        revalidate();
        repaint();
    }//GEN-LAST:event_pCanvasMousePressed

    private void pCanvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pCanvasMouseReleased
        escrevendo = false;
    }//GEN-LAST:event_pCanvasMouseReleased

    private void pCanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pCanvasMouseDragged
        if (escrevendo) {
            rotaAtual.add(new Point(evt.getX(), evt.getY()));

            revalidate();
            repaint();
        }
    }//GEN-LAST:event_pCanvasMouseDragged

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Confirmar limpeza de escrita?",
                "Confirmação", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            rotas.clear();

            revalidate();
            repaint();
        }
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed
        pegarCaneta();
        for (ArrayList<Point2D> rota : rotas) {
            acrescentarPontosIntermediarios(rota);
            percorrerRota(rota);
        }
        guardarCaneta();
    }//GEN-LAST:event_jButtonExecutarActionPerformed

    /**
     * Move o braço robótico para pegar a caneta da posição pré-definida.
     */
    private void pegarCaneta() {
        BracoRobotico.getInstance().posicionarGarra(-50, +20, +30);
        BracoRobotico.getInstance().moverGarra(150);
    }
    
    /**
     * Move o braço robótico para guardar a caneta na posição pré-definida.
     */
    private void guardarCaneta() {
        
    }
    
    /**
     * Move o braço robótico pela rota indicada, usando as coordenadas dos pontos da rota.
     * 
     * @param rota é uma lista com a sequência de coordenadas dos pontos a percorrer.
     */
    private void percorrerRota(ArrayList<Point2D> rota) {
        
    }
    
    /**
     * Acrescenta pontos intermediários à rota indicada, se necessário, para que 
     * a distância entre quaisquer dois pontos da rota não seja maior do que 1 mm.
     * A escala em uso é 0.28 mm a cada pixel (unidade).
     * 
     * @param rota é uma lista com a sequência de coordenadas dos pontos a percorrer.
     */
    private void acrescentarPontosIntermediarios(ArrayList<Point2D> rota) {
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEscrita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEscrita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEscrita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEscrita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEscrita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinnerAlturaPapel;
    private javax.swing.JPanel pCanvas;
    // End of variables declaration//GEN-END:variables
}
